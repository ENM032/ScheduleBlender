using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Auth.Data;
using DataCalculationLibrary2.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using ScheduleBlenderWebApp.Areas.Identity.Data;
using System.Globalization;
using System.Diagnostics;

namespace ScheduleBlenderWebApp.Controllers
{
    [Authorize]
    public class ModuleController : Controller
    {
        // Autogenerated by Visual Studio
        private readonly ILogger<ModuleController> _logger;
        private readonly ScheduleBlenderWebAppContext _context;
        private readonly UserManager<ApplicationUser> _userManager;
        private string? userId;

        // Autogenerated by Visual Studio
        public ModuleController(ILogger<ModuleController> logger, ScheduleBlenderWebAppContext context, UserManager<ApplicationUser> userManager)
        {
            _logger = logger;
            _context = context;
            this._userManager = userManager;
        }

        // Autogenerated by Visual Studio
        // GET: Module
        public async Task<IActionResult> Index()
        {
            //gets the user id from the user manager for the logged in user
            populateLocalUserIdVariable();

            //returns all the modules associated with the logged in user
            return _context.Modules != null ?
                          View(await _context.Modules.Where(x => x.UserId == userId).ToListAsync()) :
                          Problem("Entity set 'ScheduleBlenderWebAppContext.Modules'  is null.");
        }

        // Autogenerated by visual studio
        // this method gets the details of specific module from the database
        // GET: Module/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null || _context.Modules == null)
            {
                return NotFound();
            }

            var @module = await _context.Modules
                .FirstOrDefaultAsync(m => m.Id == id);
            if (@module == null)
            {
                return NotFound();
            }

            return View(@module);
        }

        // GET: Module/Create
        public IActionResult Create()
        {
            /*this code was taken from compilecode
             * uploaded by compilecode
             * available at: https://www.compilemode.com/2021/06/dropdown-list-in-asp-net-core-mvc.html
            */
            //Creating the list of SelectListItem
            List<SelectListItem> semesters = new()
            {
                new SelectListItem { Value = "Semester 1", Text = "Semester 1"},
                new SelectListItem { Value = "Semester 2", Text = "Semester 2"},
                new SelectListItem { Value = "Semester 3", Text = "Semester 3"},
                new SelectListItem { Value = "Semester 4", Text = "Semester 4"},
                new SelectListItem { Value = "Semester 5", Text = "Semester 5"},
                new SelectListItem { Value = "Semester 6", Text = "Semester 6"},
            };

            //assigning SelectListItem to view Bag
            ViewBag.semesters = semesters;
            return View();
        }

        // POST: Module/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,CurrentSemester,WeeksInSemester,StartDate,Code,Name,Credits,WeeklyClassHours")] Module @module)
        {
            if (ModelState.IsValid)
            {
                //Converting the entire word to upper case letters
                @module.Code = @module.Code.ToUpper();

                //Converts the first character of each word after a whitespace to an uppercase letter
                TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
                @module.Name = textInfo.ToTitleCase(@module.Name.ToLower());

                //Assigning values to the fields not entered by the user
                //then saving the entire module entity (user inputed values + values assignment here)  to the database
                @module.WeeklySelfStudyHours = CalculateWeeklySelfStudyHours(@module.Credits, @module.WeeksInSemester, @module.WeeklyClassHours);
                @module.WeeklySelfStudyHoursCompleted = 0;
                @module.RemainingWeeklySelfStudyHours = @module.WeeklySelfStudyHours;
                populateLocalUserIdVariable();
                @module.UserId = userId;

                _context.Add(@module);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(@module);
        }

        // Autogenerated by Visual Studio
        // GET: Module/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null || _context.Modules == null)
            {
                return NotFound();
            }

            var @module = await _context.Modules.FindAsync(id);
            if (@module == null)
            {
                return NotFound();
            }
            return View(@module);
        }

        // POST: Module/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,CurrentSemester,WeeksInSemester,StartDate,Code,Name,Credits,WeeklyClassHours,WeeklySelfStudyHours,WeeklySelfStudyHoursCompleted,RemainingWeeklySelfStudyHours,SelfStudyDateCompleted,UserId")] Module @module)
        {
            if (id != @module.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    /*
                     * The code to remove tracking from the database context was obtained from learn microsoft
                     * Uploaded by: microsoft
                     * Available at: https://learn.microsoft.com/en-us/ef/core/querying/tracking
                     */
                    var databaseObj = await _context.Modules.Where(x => x.Id == id).AsNoTracking().FirstAsync();

                    @module.WeeklySelfStudyHoursCompleted += databaseObj.WeeklySelfStudyHoursCompleted;

                    // If the weekly self study hours exceeds the total recommended self study hours
                    // add an error message, return the view and do not save the changes to the database
                    // else save the changes to the database
                    if (databaseObj.WeeklySelfStudyHours - @module.WeeklySelfStudyHoursCompleted < 0)
                    {
                        ModelState.AddModelError(string.Empty, "Your completed self study hours exceeds your remaining self study hours, please enter less completed self study hours");
                        return View(@module);
                    }
                    else
                    {
                        @module.RemainingWeeklySelfStudyHours = databaseObj.WeeklySelfStudyHours - @module.WeeklySelfStudyHoursCompleted;

                        _context.Update(@module);
                        await _context.SaveChangesAsync();
                    }
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ModuleExists(@module.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(@module);
        }

        // Autogenerated by Visual Studio
        // Gets module information of the module that is about to be deleted
        // GET: Module/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null || _context.Modules == null)
            {
                return NotFound();
            }

            var @module = await _context.Modules
                .FirstOrDefaultAsync(m => m.Id == id);
            if (@module == null)
            {
                return NotFound();
            }

            return View(@module);
        }

        // Autogenerated by Visual Studio
        // Deletes a module from the database/database context
        // POST: Module/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.Modules == null)
            {
                return Problem("Entity set 'ScheduleBlenderWebAppContext.Modules'  is null.");
            }
            var @module = await _context.Modules.FindAsync(id);
            if (@module != null)
            {
                _context.Modules.Remove(@module);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        // Autogenerated by Visual Studio
        // Checks if the module exists and returns a true value
        private bool ModuleExists(int id)
        {
            return (_context.Modules?.Any(e => e.Id == id)).GetValueOrDefault();
        }

        // Autogenerated by Visual Studio
        // Use to display detailed information about an error
        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        // Calculates the recommended weekly class hours for a module using some of the data entered by the user
        private int CalculateWeeklySelfStudyHours(int credits, int weeksInSemester, int weeklyClassHours)
        {
            return (credits * 10 / weeksInSemester) - weeklyClassHours;
        }

        // This method returns the neccessary data to display in the doughnut chart
        [HttpPost]
        public async Task<List<object>> GetChartData()
        {
            populateLocalUserIdVariable();

            /*
             * This code was taken from youtube 
             * titled: Create Chart in ASP.NET Core
             * uploaded by: Coding World
             * available at: https://www.youtube.com/watch?v=56aB0Yi9QlE
             */
            var data = new List<object>();
            var labels = await _context.Modules.Where(x => x.UserId == userId).Select(x => x.Code).ToListAsync();
            var hours = await _context.Modules.Where(x => x.UserId == userId).Select(x => x.WeeklySelfStudyHoursCompleted).ToListAsync();
            var recommendHours = await _context.Modules.Where(x => x.UserId == userId).Select(x => x.WeeklySelfStudyHours).ToListAsync();

            data.Add(labels);
            data.Add(hours);
            data.Add(recommendHours);
            return data;
        }

        // Gets the database data to be used in the chart
        public async Task<IActionResult> ChartAsync()
        {
            populateLocalUserIdVariable();
            var tempModuleList = await _context.Modules.Where(x => x.UserId == userId).ToListAsync();

            /*
             * This code was taken from stackoverflow
             * Uploaded by Konstantin Dinev
             * Available at: https://stackoverflow.com/questions/41267170/asp-net-mvc5-accessing-button-in-view-from-controller
             */
            if (!tempModuleList.Any())
            {
                //Adds an error message to be displayed if there are no module information available associated to the user in the database
                ModelState.AddModelError(string.Empty, "No module information added. Cannot draw doughnut chart. Please add module information first.");
                //This viewbag will be used to either display or not display the error message and the button to add module information
                ViewBag.UserModulesEmpty = true;
            }
            else
            {
                ViewBag.UserModulesEmpty = false;
            }
            return View();
        }

        // gets the user id of the logged in user every time it is called
        private void populateLocalUserIdVariable()
        {
            userId = _userManager.GetUserId(this.User);
        }
    }
}
